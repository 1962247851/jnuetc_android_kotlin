package jn.mjz.aiot.jnuetc.kotlin.model.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import jn.mjz.aiot.jnuetc.kotlin.model.entity.DataChangeLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_CHANGE_LOG".
*/
public class DataChangeLogDao extends AbstractDao<DataChangeLog, Long> {

    public static final String TABLENAME = "DATA_CHANGE_LOG";

    /**
     * Properties of entity DataChangeLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChangeInfo = new Property(1, String.class, "changeInfo", false, "CHANGE_INFO");
        public final static Property Date = new Property(2, long.class, "date", false, "DATE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property DataId = new Property(4, Long.class, "dataId", false, "DATA_ID");
    }

    private Query<DataChangeLog> data_DataChangeLogsQuery;

    public DataChangeLogDao(DaoConfig config) {
        super(config);
    }
    
    public DataChangeLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_CHANGE_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHANGE_INFO\" TEXT NOT NULL ," + // 1: changeInfo
                "\"DATE\" INTEGER NOT NULL ," + // 2: date
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"DATA_ID\" INTEGER NOT NULL );"); // 4: dataId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_CHANGE_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataChangeLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getChangeInfo());
        stmt.bindLong(3, entity.getDate());
        stmt.bindString(4, entity.getName());
        stmt.bindLong(5, entity.getDataId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataChangeLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getChangeInfo());
        stmt.bindLong(3, entity.getDate());
        stmt.bindString(4, entity.getName());
        stmt.bindLong(5, entity.getDataId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataChangeLog readEntity(Cursor cursor, int offset) {
        DataChangeLog entity = new DataChangeLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // changeInfo
            cursor.getLong(offset + 2), // date
            cursor.getString(offset + 3), // name
            cursor.getLong(offset + 4) // dataId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataChangeLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChangeInfo(cursor.getString(offset + 1));
        entity.setDate(cursor.getLong(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setDataId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataChangeLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataChangeLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataChangeLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dataChangeLogs" to-many relationship of Data. */
    public List<DataChangeLog> _queryData_DataChangeLogs(Long dataId) {
        synchronized (this) {
            if (data_DataChangeLogsQuery == null) {
                QueryBuilder<DataChangeLog> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DataId.eq(null));
                data_DataChangeLogsQuery = queryBuilder.build();
            }
        }
        Query<DataChangeLog> query = data_DataChangeLogsQuery.forCurrentThread();
        query.setParameter(0, dataId);
        return query.list();
    }

}
